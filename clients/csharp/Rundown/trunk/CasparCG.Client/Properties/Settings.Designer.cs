//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Caspar_Pilot.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string TemplateFolder {
            get {
                return ((string)(this["TemplateFolder"]));
            }
            set {
                this["TemplateFolder"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LightBlue")]
        public string TemplateColor {
            get {
                return ((string)(this["TemplateColor"]));
            }
            set {
                this["TemplateColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LightGreen")]
        public string GraphicColor {
            get {
                return ((string)(this["GraphicColor"]));
            }
            set {
                this["GraphicColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CornflowerBlue")]
        public string MultistepColor {
            get {
                return ((string)(this["MultistepColor"]));
            }
            set {
                this["MultistepColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("f")]
        public string DefaultFieldNamePrefix {
            get {
                return ((string)(this["DefaultFieldNamePrefix"]));
            }
            set {
                this["DefaultFieldNamePrefix"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int DefaultFieldNameStartIndex {
            get {
                return ((int)(this["DefaultFieldNameStartIndex"]));
            }
            set {
                this["DefaultFieldNameStartIndex"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Black")]
        public global::System.Drawing.Color PreviewBackgroundColor {
            get {
                return ((global::System.Drawing.Color)(this["PreviewBackgroundColor"]));
            }
            set {
                this["PreviewBackgroundColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Plum")]
        public string StoredDataColor {
            get {
                return ((string)(this["StoredDataColor"]));
            }
            set {
                this["StoredDataColor"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>Recall preset#RSC</string>\r\n</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection SpyderSettings {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["SpyderSettings"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LightGray")]
        public string ControlColor {
            get {
                return ((string)(this["ControlColor"]));
            }
            set {
                this["ControlColor"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("11116")]
        public int SpyderPort {
            get {
                return ((int)(this["SpyderPort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10.23.52.206")]
        public string SpyderIp {
            get {
                return ((string)(this["SpyderIp"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EnablePreview {
            get {
                return ((bool)(this["EnablePreview"]));
            }
            set {
                this["EnablePreview"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EnableTemplateData {
            get {
                return ((bool)(this["EnableTemplateData"]));
            }
            set {
                this["EnableTemplateData"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EnableOutputSettings {
            get {
                return ((bool)(this["EnableOutputSettings"]));
            }
            set {
                this["EnableOutputSettings"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EnableVideoLayers {
            get {
                return ((bool)(this["EnableVideoLayers"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EnableControlValues {
            get {
                return ((bool)(this["EnableControlValues"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Plum")]
        public string DataUpdateColor {
            get {
                return ((string)(this["DataUpdateColor"]));
            }
            set {
                this["DataUpdateColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F8")]
        public global::System.Windows.Forms.Keys ShortcutKeyLoad {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyLoad"]));
            }
            set {
                this["ShortcutKeyLoad"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F12")]
        public global::System.Windows.Forms.Keys ShortcutKeyPlay {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyPlay"]));
            }
            set {
                this["ShortcutKeyPlay"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F11")]
        public global::System.Windows.Forms.Keys ShortcutKeyStep {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyStep"]));
            }
            set {
                this["ShortcutKeyStep"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F7")]
        public global::System.Windows.Forms.Keys ShortcutKeyUpdate {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyUpdate"]));
            }
            set {
                this["ShortcutKeyUpdate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F9")]
        public global::System.Windows.Forms.Keys ShortcutKeyStop {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyStop"]));
            }
            set {
                this["ShortcutKeyStop"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+F6")]
        public global::System.Windows.Forms.Keys ShortcutKeyClearLayer {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyClearLayer"]));
            }
            set {
                this["ShortcutKeyClearLayer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+Alt+F6")]
        public global::System.Windows.Forms.Keys ShortcutKeyClearChannel {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyClearChannel"]));
            }
            set {
                this["ShortcutKeyClearChannel"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Collections.Specialized.StringCollection RecentFiles {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["RecentFiles"]));
            }
            set {
                this["RecentFiles"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfChannelInformation xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <ChannelInformation>
    <Label>localhost</Label>
    <Hostname>localhost</Hostname>
    <Port>5250</Port>
    <Channel>1</Channel>
    <Online>false</Online>
    <ArgbValue>-1</ArgbValue>
  </ChannelInformation>
</ArrayOfChannelInformation>")]
        public global::Caspar_Pilot.Hosts.ChannelInformationList Channels {
            get {
                return ((global::Caspar_Pilot.Hosts.ChannelInformationList)(this["Channels"]));
            }
            set {
                this["Channels"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt+M")]
        public global::System.Windows.Forms.Keys ShortcutKeyReloadOfflineTemplates {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyReloadOfflineTemplates"]));
            }
            set {
                this["ShortcutKeyReloadOfflineTemplates"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+M")]
        public global::System.Windows.Forms.Keys ShortcutKeyReloadTemplates {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyReloadTemplates"]));
            }
            set {
                this["ShortcutKeyReloadTemplates"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ctrl+G")]
        public global::System.Windows.Forms.Keys ShortcutKeyReloadGraphics {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyReloadGraphics"]));
            }
            set {
                this["ShortcutKeyReloadGraphics"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("None")]
        public global::System.Windows.Forms.Keys ShortcutKeyClearAll {
            get {
                return ((global::System.Windows.Forms.Keys)(this["ShortcutKeyClearAll"]));
            }
            set {
                this["ShortcutKeyClearAll"] = value;
            }
        }
    }
}
